# ============================================================
# 测试配置文件
# 用于测试各个模块的函数是否正常工作
# ============================================================

# 全局配置
global:
  name: "test_framework"
  version: "1.0"
  seed: 42

# 测试模式：监督学习（最简单的情况）
training_mode:
  type: "supervised"
  subtype: null

# 模型定义 - 简单的MLP
models:
  # 简单的分类器
  classifier:
    type: "Functional"
    reflection: tensorflow.keras.Sequential
    layers:
      - reflection: tensorflow.keras.layers.Dense
        args:
          units: 64
          activation: relu
          input_shape: [10]

      - reflection: tensorflow.keras.layers.Dense
        args:
          units: 32
          activation: relu

      - reflection: tensorflow.keras.layers.Dense
        args:
          units: 2
          activation: softmax
          name: output

# 优化器定义
optimizers:
  classifier_opt:
    reflection: tensorflow.keras.optimizers.Adam
    args:
      learning_rate: 0.001
      beta_1: 0.9

# 损失函数定义
losses:
  cross_entropy:
    reflection: tensorflow.keras.losses.CategoricalCrossentropy
    args: {}

# 数据管理
data_manager:
  supervised_source:
    # 使用小数据集进行测试
    train:
      reflection: modules.utils.build_csv_loader
      args:
        file_path: "data/train_test.csv"
        batch_size: 16
        shuffle: true

    val:
      reflection: modules.utils.build_csv_loader
      args:
        file_path: "data/val_test.csv"
        batch_size: 16
        shuffle: false

    test:
      reflection: modules.utils.build_csv_loader
      args:
        file_path: "data/test_test.csv"
        batch_size: 16
        shuffle: false

# 训练流程 - 监督学习
training_pipeline:
  supervised:
    loop_type: "epoch_batch"

    parameters:
      epochs: 2  # 仅训练2个epoch用于测试
      steps_per_epoch: null

    step_sequence:
      # 获取batch数据
      - name: "fetch_batch"
        reflection: modules.data.get_batch
        args:
          loader: "train_loader"

      # 前向传播
      - name: "forward_pass"
        reflection: modules.inference.forward
        args:
          model: "classifier"
          inputs: "batch.x"

      # 计算损失
      - name: "compute_loss"
        reflection: modules.losses.compute_supervised_loss
        args:
          predictions: "last_result"
          targets: "batch.y"
          loss_fn: "cross_entropy"

      # 反向传播
      - name: "backward_pass"
        reflection: modules.optimizer.compute_gradients
        args:
          loss: "last_result"
          model: "classifier"

      # 更新参数
      - name: "update_params"
        reflection: modules.optimizer.apply_gradients
        args:
          optimizer: "classifier_opt"
          gradients: "last_result"
          model: "classifier"

    loop_condition:
      check_type: "epoch_based"
      max_epochs: "config.training_pipeline.supervised.parameters.epochs"

    evaluation:
      frequency: "epoch"
      eval_split: "val"

# 评估流程
evaluation:
  supervised_eval:
    frequency: "epoch"
    split: "val"

    steps:
      - name: "forward_pass"
        reflection: modules.inference.forward
        args:
          model: "classifier"
          inputs: "batch.x"

      - name: "compute_metrics"
        reflection: modules.metrics.compute_metrics
        args:
          predictions: "last_result"
          targets: "batch.y"
          metrics: ["accuracy"]

# 导出配置
export:
  reflection: tensorflow.keras.models.save_model
  args:
    model: "classifier"
    filepath: "outputs/onnx/test_model.keras"
    save_format: "keras"

# 部署配置
deployment:
  host: "127.0.0.1"
  port: 9000
  model_key: "classifier"
  service_type: "onnx_inference"
