stages:
  - name: stage_test
    description: "测试阶段：简单 MLP 模型"
    model:
      type: Functional
      generator:
        reflection: tensorflow.keras.Sequential
        layers:
          - reflection: tensorflow.keras.layers.Dense
            args:
              units: 128
              activation: relu
              input_shape: [100]
          - reflection: tensorflow.keras.layers.Dense
            args:
              units: 784
              activation: tanh
              name: fake_image
      discriminator:
        reflection: tensorflow.keras.Sequential
        layers:
          - reflection: tensorflow.keras.layers.Dense
            args:
              units: 128
              activation: relu
              input_shape: [784]
          - reflection: tensorflow.keras.layers.Dense
            args:
              units: 1
              activation: sigmoid
              name: validity
      optimizers:
        generator:
          reflection: tensorflow.keras.optimizers.Adam
          args:
            learning_rate: 0.0002
            beta_1: 0.5
        discriminator:
          reflection: tensorflow.keras.optimizers.Adam
          args:
            learning_rate: 0.0002
            beta_1: 0.5
      losses:
        generator: tensorflow.keras.losses.BinaryCrossentropy
        discriminator: tensorflow.keras.losses.BinaryCrossentropy

    data:
      train:
        reflection: modules.utils.build_csv_loader
        args:
          file_path: "data/train.csv"
          batch_size: 64
          shuffle: True
      val:
        reflection: modules.utils.build_web_dataset
        args:
          host: "127.0.0.1"
          port: 5000
          endpoint_path: "/val_csv"
          payload: null
          batch_size: 64
          shuffle: False
      test:
        reflection: modules.utils.build_csv_loader   # 修改为 CSV Loader 或自定义 Loader
        args:
          file_path: "data/test.csv"
          batch_size: 32
          shuffle: False

    training:
      epochs: 3
      steps:
        - reflection: modules.losses.compute_loss
          args:
            model: generator
            loss_fn: gen_loss_fn
            x: inputs
            y: labels

        - reflection: modules.optimizer.apply_gradients
          args:
            optimizer: gen_optimizer
            loss: last_result

        - reflection: modules.losses.compute_loss
          args:
            model: discriminator
            loss_fn: dis_loss_fn
            x: fake_images
            y: fake_labels

        - reflection: modules.optimizer.apply_gradients
          args:
            optimizer: dis_optimizer
            loss: last_result

    evaluation:
      dataset: val
      steps:
        - reflection: modules.inference.forward
          arguments:
            model: generator
            inputs: inputs

        - reflection: modules.losses.compute_loss
          arguments:
            predictions: last_result
            targets: labels
            loss_fn: gen_loss_fn

        - reflection: modules.metrics.compute_accuracy
          arguments:
            predictions: last_result
            targets: labels

export:
  path: "outputs/onnx/test_model.onnx"
  model_key: stage_test

deployment:
  host: "127.0.0.1"
  port: 9000
  model_key: stage_test
